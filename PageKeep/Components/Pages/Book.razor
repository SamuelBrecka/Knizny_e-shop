@page "/book/{BookId:int}"

@inject PageKeep.dbcontext.AppDbContext DbContext
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

@if (CurrentBook != null)
{
    <div class="page-container">
        <div class="side-panel left"></div>

        <div class="main-content">
            <div class="container-book">
                <div class="book-image-container">
                    <img src="@CurrentBook.Image" alt="@CurrentBook.Title"/>
                </div>
                <div class="text-container">
                    <h2>@CurrentBook.Title</h2>
                    <p>Autor: @CurrentBook.Author</p>
                    <p>@CurrentBook.Description</p>
                    <button class="buy-button">Kúpiť za @CurrentBook.Price €</button>
                    <div class="genres">
                        <h3>Žánre</h3>
                        @if (CurrentBook.BookGenres != null && CurrentBook.BookGenres.Any())
                        {
                            <ul>
                                @foreach (var bookGenre in CurrentBook.BookGenres)
                                {
                                    <li>@bookGenre.Genre.Name</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>Táto kniha nemá priradené žánre.</p>
                        }
                    </div>

                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <div class="admin-actions">
                                <button class="btn-delete" @onclick="NavigateToEditBook">Upraviť</button>
                                <button class="btn-delete" @onclick="DeleteBook">Vymazať</button>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>

            <AuthorizeView Roles="User">
                <Authorized>
                    <div class="add-review">
                        <h3>Pridať recenziu</h3>
                        <EditForm Model="@_newReviewModel" OnValidSubmit="SubmitReview" FormName="formAddReviewModel" Context="contextAddReview">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="content">Recenzia</label>
                                <InputTextArea id="content" @bind-value="_newReviewModel.Content" class="form-control"/>
                                <ValidationMessage For="() => _newReviewModel.Content" class="validation-errors" />
                            </div>

                            <button type="submit" class="btn btn-primary">Pridať recenziu</button>
                        </EditForm>
                    </div>
                </Authorized>
            </AuthorizeView>

            <div class="reviews">
                <h3>Recenzie</h3>
                @if (Reviews == null || !Reviews.Any())
                {
                    <p>Zatiaľ nie sú k dispozícii žiadne recenzie.</p>
                }
                else
                {
                    @foreach (var review in Reviews)
                    {
                        <div class="review">
                            <h4>@review.ReviewerName</h4>
                            <p>@review.Content</p>
                            <small>@review.CreatedAt.ToString("d. MMM yyyy")</small>
                        </div>
                    }
                }
            </div>

            <div class="show-all-reviews">
                <button class="btn-full-width" @onclick="NavigateToAllReviews">Zobraziť všetky recenzie</button>
            </div>
        </div>

        <div class="side-panel right"></div>
    </div>
}
else
{
    <div class="container">
        <h2>Kniha nenájdená</h2>
        <p>Prepáčte, ale kniha s ID @BookId sa nenašla.</p>
    </div>
}

@code {
    [Parameter]
    public int BookId { get; set; }
    private UserAccount? CurrentUser;
    private BookModel? CurrentBook;

    private List<ReviewModel> Reviews;
    private ReviewModel _newReviewModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurrentBook = await DbContext.Books
            .Include(b => b.BookGenres)
            .ThenInclude(bg => bg.Genre)
            .FirstOrDefaultAsync(b => b.Id == BookId);
        Reviews = await DbContext.Reviews
            .Where(r => r.BookId == BookId)
            .OrderByDescending(r => r.CreatedAt)
            .Take(3)
            .ToListAsync();

        if (user.Identity.IsAuthenticated)
        {
            string username = user.Identity.Name;
            CurrentUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Username == username);
        }
    }

    private void NavigateToEditBook()
    {
        NavManager.NavigateTo($"/edit-book/{BookId}");
    }

    private async Task DeleteBook()
    {
        if (CurrentBook != null)
        {
            DbContext.Books.Remove(CurrentBook);
            await DbContext.SaveChangesAsync();
            NavManager.NavigateTo("/");
        }
    }

    private async Task SubmitReview()
    {
        var newReview = new ReviewModel
            {
                BookId = BookId,
                Content = _newReviewModel.Content,
                CreatedAt = DateTime.UtcNow,
                ReviewerName = CurrentUser.Username,
                UserId = CurrentUser.Id
            };

        DbContext.Reviews.Add(newReview);
        await DbContext.SaveChangesAsync();

        Reviews = await DbContext.Reviews.Where(r => r.BookId == BookId).ToListAsync();
        _newReviewModel = new ReviewModel();
    }

    private void NavigateToAllReviews()
    {
        NavManager.NavigateTo($"/reviews/{BookId}");
    }
}