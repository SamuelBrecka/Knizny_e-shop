@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject UserAccountService UserAccountService
@inject NavigationManager navManager


<div class="login-page">
    <div class="login-box">
        <h2>Prihlásenie</h2>
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Používateľské meno</label>
                <InputText id="username" @bind-Value="Model.UserName" class="form-control" placeholder="Zadajte používateľské meno" />
                <ValidationMessage For="() => Model.UserName" />
            </div>

            <div class="form-group">
                <label for="password">Heslo</label>
                <InputText id="password" @bind-Value="Model.Password" type="password" placeholder="Zadajte heslo" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Prihlásiť sa</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm] 
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var acc = await UserAccountService.GetUserByNameAsyc(Model.UserName);
        if (acc is null || !PasswordHasher.VerifyPassword(acc.PasswordHash, Model.Password))
        {
            errorMessage = "Neplatne meno alebo heslo";
            return;
        }

        var claim = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.UserName),
            new Claim(ClaimTypes.Role, acc.Role)
        };

        var identity = new ClaimsIdentity(claim, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navManager.NavigateTo("/");
    }
}