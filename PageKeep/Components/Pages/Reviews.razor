@page "/reviews/{BookId:int}"
@using PageKeep.Services

@inject UserAccountService UserAccountService
@inject ReviewService ReviewService
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<h3 class ="review-title">Recenzie pre knihu</h3>

<div class="review-grid">

    @if (_reviewList == null || !_reviewList.Any())
    {
        <p>Zatiaľ nie sú k dispozícii žiadne recenzie.</p>
    }
    else
    {
        @foreach (var review in _reviewList)
        {
            <div class="review-card">
                <div class="review-header">
                    <h4>@review.ReviewerName</h4>
                </div>

                @if (review.Id == _editingReviewId)
                {
                    <EditForm Model="@_editingReview" OnValidSubmit="SaveEditedReview">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <textarea @bind="_editingReview.Content" class="edit-textarea form-control"></textarea>
                            <ValidationMessage For="@(() => _editingReview.Content)" class="validation-errors" />
                        </div>

                        <div class="review-actions">
                            <button type="submit" class="btn-save-review">Uložiť</button>
                            <button type="button" class="btn-cancel-review" @onclick="CancelEdit">Zrušiť</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="review-content">
                        <p>@review.Content</p>
                        <small>@review.CreatedAt.ToString("d. MMM yyyy")</small>

                        @if (_currentUser != null)
                        {
                            @if (review.UserId == _currentUser.Id || _currentUser.Role == "Admin")
                            {
                                <div class="review-actions">
                                    @if (_currentUser.Role == "User")
                                    {
                                        <button class="btn-edit-review" @onclick="() => StartEditing(review)">Upraviť</button>
                                    }
                                    <button class="btn-delete-review" @onclick="() => DeleteReview(review.Id)">Vymazať</button>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    }
</div>
@code {
    [Parameter]
    public int BookId { get; set; }
    private List<ReviewModel>? _reviewList = new();
    private ReviewModel _editingReview = new();
    private UserAccount? _currentUser;
    private int? _editingReviewId = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            string? username = user.Identity.Name;
            _currentUser = await UserAccountService.GetUserByNameAsyc(username);
        }
        _reviewList = await ReviewService.GetReviewsAsync(BookId);
    }

    private void StartEditing(ReviewModel review)
    {
        _editingReviewId = review.Id;
        _editingReview = new ReviewModel()
            {
                Id = review.Id,
                Content = review.Content,
                UserId = review.UserId,
                CreatedAt = review.CreatedAt
            };
    }

    private async Task SaveEditedReview()
    {
        await ReviewService.EditReviewAsync(_editingReview.Id, _editingReview.Content, _editingReview.UserId);
        _editingReviewId = null;
        _editingReview = new();
    }

    private void CancelEdit()
    {
        _editingReviewId = null;
    }

    private async Task DeleteReview(int reviewId)
    {
        await ReviewService.DeleteReviewAsync(reviewId);
        _reviewList = await ReviewService.GetReviewsAsync(BookId);
    }
}