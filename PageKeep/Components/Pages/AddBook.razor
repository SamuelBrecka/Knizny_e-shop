@page "/add-book"

@using PageKeep.dbcontext
@using PageKeep.ViewModels
@inject BookViewModel BookVM
@inject AppDbContext DbContext
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<AuthorizeView Roles="Admin" Context="authContext">
    <Authorized>
        <section id="add-book" class="edit-book-section">
            <div class="container">
                <h2>Pridať knihu</h2>
                <div class="edit-book-form">
                    <EditForm Model="@Book" OnValidSubmit="BookAdd" FormName="FormAddBook">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label for="title">Názov</label>
                            <InputText id="title" class="form-control" @bind-Value="Book.Title" placeholder="Zadajte názov knihy"/>
                            <ValidationMessage For="() => Book.Title" class="validation-errors" />
                        </div>

                        <div class="form-group">
                            <label for="author">Autor</label>
                            <InputText id="author" class="form-control" @bind-Value="Book.Author" placeholder="Zadajte meno autora"/>
                            <ValidationMessage For="() => Book.Author" class="validation-errors" />
                        </div>

                        <div class="form-group">
                            <label for="price">Cena</label>
                            <InputNumber id="price" class="form-control" @bind-Value="Book.Price" placeholder="Zadajte cenu"/>
                            <ValidationMessage For="() => Book.Price" class="validation-errors" />
                        </div>


                        <div class="form-group">
                            <label for="image">URL obrázka</label>
                            <InputText id="image" class="form-control" @bind-Value="Book.Image" placeholder="Zadajte URL obrázka"/>
                            <ValidationMessage For="() => Book.Image"/>
                        </div>

                        <div class="form-group">
                            <label for="imageUpload">Nahrať obrázok (.jpg, .jpeg)</label>
                            <InputFile OnChange="HandleFileUpload" accept=".jpg,.jpeg"/>
                        </div>

                        <div class="form-group">
                            <label for="description">Popis</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="Book.Description" placeholder="Zadajte popis knihy"/>
                            <ValidationMessage For="() => Book.Description" class="validation-errors" />
                        </div>

                        <div class="form-group">
                            <label for="genre">Žáner knihy</label>
                            <div class="genre-checkboxes">
                                @foreach (var genre in Genres)
                                {
                                    <div class="checkbox-item">
                                        <input type="checkbox" id="genre-@genre.Id" value="@genre.Id"
                                               checked="@selectedGenres.Contains(genre.Id)"
                                               @onchange="e => ToggleGenre(genre.Id, e.Value.ToString())"/>
                                        <label for="genre-@genre.Id">@genre.Name</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="add-button">Pridať knihu</button>
                            <button type="button" class="btn btn-secondary" @onclick='() => NavigateBack("books")'>Zrušiť</button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success mt-3">@SuccessMessage</div>
                    }
                </div>
            </div>
        </section>
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <h2>Prístup zamietnutý</h2>
            <p>Na prístup k tejto stránke musíte byť prihlásený ako administrátor.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private BookModel Book { get; set; } = new();
    private List<GenreModel> Genres = new();
    private List<int> selectedGenres = new();
    private string? SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        Genres = await DbContext.Genres.ToListAsync();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.IsInRole("Admin"))
        {
            NavManager.NavigateTo("/access-denied");
        }
    }

    private void ToggleGenre(int genreId, string value)
    {
        if (selectedGenres.Contains(genreId))
        {
            selectedGenres.Remove(genreId);
        }
        else
        {
            selectedGenres.Add(genreId);
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);
            Book.ImageFile = stream.ToArray();
        }
    }

    private async Task BookAdd()
    {
        Book.BookGenres = selectedGenres.Select(gId => new BookGenreModel { GenreId = gId }).ToList();

        await BookVM.AddBookAsync(Book); 
        NavigateBack("books");
    }

    private void NavigateBack(string where)
    {
        NavManager.NavigateTo($"/{where}");
    }

    private void NavigateBack()
    {
        NavManager.NavigateTo("/");
    }
}