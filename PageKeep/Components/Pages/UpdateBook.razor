@page "/edit-book/{BookId:int}"
@using PageKeep.Models.ViewModels

@inject BookViewModel BookVM
@inject GenreViewModel GenreVM
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<AuthorizeView Roles="Admin" Context = "authContext">
    <Authorized>
        <section id="edit-book" class="edit-book-section">
            <div class="container">
                <h2>Upraviť knihu</h2>
                @if (Book == null)
                {
                    <p>Načítava sa kniha...</p>
                }
                else
                {
                    <div class="edit-book-form">
                        <EditForm Model="@Book" OnValidSubmit="EditBook" FormName="FormUpdateBook">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="title">Názov</label>
                                <InputText id="title" class="form-control" @bind-Value="Book.Title" placeholder="Zadajte názov knihy" />
                                <ValidationMessage For="() => Book.Title" class="validation-errors" />
                            </div>

                            <div class="form-group">
                                <label for="author">Autor</label>
                                <InputText id="author" class="form-control" @bind-Value="Book.Author" placeholder="Zadajte meno autora" />
                                <ValidationMessage For="() => Book.Author" class="validation-errors" />
                            </div>

                            <div class="form-group">
                                <label for="price">Cena</label>
                                <InputNumber id="price" class="form-control" @bind-Value="Book.Price" placeholder="Zadajte cenu" />
                                <ValidationMessage For="() => Book.Price" class="validation-errors" />
                            </div>

                            <div class="form-group">
                                <label for="image">URL obrázka</label>
                                <InputText id="image" class="form-control" @bind-Value="Book.Image" placeholder="Zadajte URL obrázka" />
                                <ValidationMessage For="() => Book.Image" class="validation-errors" />
                            </div>
                            
                            <div class="form-group">
                                <label for="imageUpload">Nahrať obrázok (.jpg, .jpeg)</label>
                                <InputFile OnChange="HandleFileUpload" accept=".jpg,.jpeg" />
                                <ValidationMessage For="() => Book.ImageFile"/>
                            </div>

                            <div class="form-group">
                                <label for="description">Popis</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="Book.Description" placeholder="Zadajte popis knihy" />
                                <ValidationMessage For="() => Book.Description" class="validation-errors" />
                            </div>
                            
                            <div class="form-group">
                                <label for="genre">Žáner knihy</label>
                                <div class="genre-checkboxes">
                                    @foreach (var genre in Genres)
                                    {
                                        <div class="checkbox-item">
                                            <input type="checkbox" id="genre-@genre.Id" value="@genre.Id"
                                                   checked="@SelectedGenres.Contains(genre.Id)"
                                                   @onchange="e => ToggleGenre(genre.Id, e.Value.ToString())" />
                                            <label for="genre-@genre.Id">@genre.Name</label>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Uložiť zmeny</button>
                                <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Zrušiť</button>
                            </div>
                        </EditForm>
                    </div>
                }
            </div>
        </section>
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <h2>Prístup zamietnutý</h2>
            <p>Na prístup k tejto stránke musíte byť prihlásený ako administrátor.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int BookId { get; set; }
    private List<GenreModel> Genres = new();
    private List<int> SelectedGenres = new();
    private BookModel? Book;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.IsInRole("Admin"))
        {
            NavManager.NavigateTo("/access-denied");
            return;
        }

        Book = await BookVM.GetBookByIdAsync(BookId);
        Book.BookGenres = await BookVM.GetBookGenresById(BookId);

        if (Book != null)
        {
            Genres = await GenreVM.GetGenresAsync();
            SelectedGenres = Book.BookGenres.Select(bg => bg.GenreId).ToList();
        }

        if (Book == null)
        {
            NavManager.NavigateTo("/");
        }

        
    }

    private async Task EditBook()
    {
        if (Book != null)
        {
            Book.BookGenres = SelectedGenres.Select(gId => new BookGenreModel { GenreId = gId }).ToList();
            await BookVM.UpdateBookAsync(Book);

            NavManager.NavigateTo("/");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);
            Book.ImageFile = stream.ToArray();
        }
    }

    private void ToggleGenre(int genreId, string value)
    {
        if (SelectedGenres.Contains(genreId))
        {
            SelectedGenres.Remove(genreId);
        }
        else
        {
            SelectedGenres.Add(genreId);
        }
    }

    private void NavigateBack()
    { 
        NavManager.NavigateTo("/");
    }
}