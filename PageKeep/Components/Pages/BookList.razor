@page "/books"
@using System.Text
@using System.Globalization

@inject PageKeep.dbcontext.AppDbContext DbContext
@rendermode InteractiveServer


<section class="book-list-section">
    <div class="container">
        <h2>Zoznam kníh</h2>

        <div class="search-filter-container">
            <input type="text" class="form-control search-box" @bind="searchQuery" @bind:event="oninput" @bind:after="FilterBooks" placeholder="Vyhľadajte knihu..." />

            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="ToggleDropdown">
                    Filtrovať podľa žánru
                </button>
                <div class="dropdown-menu" style="display: @(isDropdownOpen ? "block" : "none")">
                    @foreach (var genre in genres)
                    {
                        <div class="dropdown-item">
                            <input type="checkbox" checked="@selectedGenres.Contains(genre.Id)" @onclick="() => ToggleGenre(genre.Id)" />
                            <label>@genre.Name</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="book-grid">
            @if (filteredBooks == null || !filteredBooks.Any())
            {
                <p>Žiadne knihy nevyhovujú zadaným kritériám.</p>
            }
            else
            {
                @foreach (var book in filteredBooks)
                {
                    <a href="/book/@book.Id" class="book">
                        <img src="@book.Image" alt="@book.Title" />
                        <h3>@book.Title</h3>
                        <p>Autor: @book.Author</p>
                        <p>Cena: @book.Price €</p>
                    </a>
                }
            }
        </div>
    </div>
</section>

@code {
    private List<BookModel> books = new();
    private List<GenreModel> genres = new();
    private List<BookModel> filteredBooks = new();

    private string searchQuery = "";
    private HashSet<int> selectedGenres = new();
    private bool isDropdownOpen = false;

    protected override async Task OnInitializedAsync()
    {
        books = await DbContext.Books.Include(b => b.BookGenres)
                                     .ThenInclude(bg => bg.Genre)
                                     .ToListAsync();

        genres = await DbContext.Genres.ToListAsync();

        FilterBooks();
    }

    private void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterBooks();
        }
    }

    private void FilterBooks()
    {
        string normalizedQuery = RemoveDiacritics(searchQuery)?.ToLower();

        filteredBooks = books
            .Where(b => (string.IsNullOrWhiteSpace(normalizedQuery) || 
                         RemoveDiacritics(b.Title).ToLower().Contains(normalizedQuery) || 
                         RemoveDiacritics(b.Author).ToLower().Contains(normalizedQuery)) &&
                        (selectedGenres.Count == 0 || b.BookGenres.Any(bg => selectedGenres.Contains(bg.Genre.Id))))
            .ToList();
    }

    private string RemoveDiacritics(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;

        return string.Concat(
            text.Normalize(NormalizationForm.FormD)
                .Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
        ).Normalize(NormalizationForm.FormC);
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private void ToggleGenre(int genreId)
    {
        if (selectedGenres.Contains(genreId))
        {
            selectedGenres.Remove(genreId);
        }
        else
        {
            selectedGenres.Add(genreId);
        }
        FilterBooks();
    }
}
